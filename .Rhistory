plt.ylabel("Count")
plt.show()
?plt.bar_label()
v = Counter(splt)
x = list(v.keys())
y = list(v.values())
xy = plt.bar(x,y)
plt.bar_label(xy, labels = y, label_type = "")
plt.axhline(y = 1, color = 'red')
plt.title("Sports Watch Data")
plt.xlabel("Digits")
plt.ylabel("Count")
plt.show()
?plt.bar_label()
v = Counter(splt)
x = list(v.keys())
y = list(v.values())
xy = plt.bar(x,y)
plt.bar_label(xy, labels = y, label_type = "edge")
plt.axhline(y = 1, color = 'red')
plt.title("Sports Watch Data")
plt.xlabel("Digits")
plt.ylabel("Count")
plt.show()
?plt.bar_label()
v = Counter(splt)
x = list(v.keys())
y = list(v.values())
xy = plt.bar(x,y)
plt.bar_label(xy, labels = y, label_type = "edge")
plt.axhline(y = 1, color = 'red')
plt.title("Sports Watch Data")
plt.xlabel("Digits")
plt.ylabel("Count")
plt.show()
plt.bar_label(xy, labels = y, label_type = "center", rotation = 90)
v = Counter(splt)
x = list(v.keys())
y = list(v.values())
xy = plt.bar(x,y)
plt.bar_label(xy, labels = y, label_type = "center", rotation = 90)
plt.axhline(y = 1, color = 'red')
plt.title("Sports Watch Data")
plt.xlabel("Digits")
plt.ylabel("Count")
plt.show()
plt.bar_label(gr, label = v.values(), label_type = "center", rotation = 90)
import decimal
from collections import Counter
import matplotlib.pyplot as plt
d2 = decimal.Decimal(2)
d = decimal.Context(prec = 10)
value = d2.sqrt(d)
div= str(value).split('.')
vad = div[1]
splt = [int(i) for i in str(vad)]
v = Counter(splt)
gr = plt.bar(v.keys(),v.values())
plt.bar_label(gr, label = v.values(), label_type = "center", rotation = 90)
plt.axhline(y = 1, color = 'red')
plt.title("Sports Watch Data")
plt.xlabel("Digits")
plt.ylabel("Count")
x = list(v.values())
y = list(v.values())
plt.show()
import decimal
from collections import Counter
import matplotlib.pyplot as plt
d2 = decimal.Decimal(2)
d = decimal.Context(prec = 10)
value = d2.sqrt(d)
div= str(value).split('.')
vad = div[1]
splt = [int(i) for i in str(vad)]
v = Counter(splt)
gr = plt.bar(v.keys(),v.values())
plt.bar_label(gr, label = v.values(), label_type = "center", rotation = 90)
#plt.axhline(y = 1, color = 'red')
plt.title("Sports Watch Data")
plt.xlabel("Digits")
plt.ylabel("Count")
x = list(v.values())
y = list(v.values())
plt.show()
import decimal
from collections import Counter
import matplotlib.pyplot as plt
d2 = decimal.Decimal(2)
d = decimal.Context(prec = 10)
value = d2.sqrt(d)
div= str(value).split('.')
vad = div[1]
splt = [int(i) for i in str(vad)]
v = Counter(splt)
gr = plt.bar(v.keys(),v.values())
plt.bar_label(gr, label = v.values(), label_type = "center", rotation = 90)
#plt.axhline(y = 1, color = 'red')
plt.title("Sports Watch Data")
plt.xlabel("Digits")
plt.ylabel("Count")
x = list(v.values())
y = list(v.values())
plt.show()
import decimal
from collections import Counter
import matplotlib.pyplot as plt
d2 = decimal.Decimal(2)
d = decimal.Context(prec = 10)
value = d2.sqrt(d)
div= str(value).split('.')
vad = div[1]
splt = [int(i) for i in str(vad)]
v = Counter(splt)
gr = plt.bar(v.keys(),v.values())
plt.bar_label(gr, label = v.values(), label_type = "center", rotation = 90)
#plt.axhline(y = 1, color = 'red')
plt.title("Sports Watch Data")
plt.xlabel("Digits")
plt.ylabel("Count")
plt.show()
import decimal
from collections import Counter
import matplotlib.pyplot as plt
d2 = decimal.Decimal(2)
d = decimal.Context(prec = 10)
value = d2.sqrt(d)
div= str(value).split('.')
vad = div[1]
splt = [int(i) for i in str(vad)]
v = Counter(splt)
gr = plt.bar(v.keys(),v.values())
plt.bar_label(gr, label = v.values(), rotation = 90)
#plt.axhline(y = 1, color = 'red')
plt.title("Sports Watch Data")
plt.xlabel("Digits")
plt.ylabel("Count")
plt.show()
import decimal
from collections import Counter
import matplotlib.pyplot as plt
d2 = decimal.Decimal(2)
d = decimal.Context(prec = 10)
value = d2.sqrt(d)
div= str(value).split('.')
vad = div[1]
splt = [int(i) for i in str(vad)]
v = Counter(splt)
gr = plt.bar(v.keys(),v.values())
plt.bar_label(gr, label = v.values(), rotation = 90)
plt.title("Sports Watch Data")
plt.xlabel("Digits")
plt.ylabel("Count")
plt.show()
v = Counter(splt)
x = list(v.keys())
y = list(v.values())
xy = plt.bar(x,y)
plt.bar_label(xy, labels = y, label_type = "center", rotation = 90)
plt.title("Sports Watch Data")
plt.xlabel("Digits")
plt.ylabel("Count")
plt.show()
import decimal
from collections import Counter
import matplotlib.pyplot as plt
d2 = decimal.Decimal(2)
d = decimal.Context(prec = 10)
value = d2.sqrt(d)
div= str(value).split('.')
vad = div[1]
splt = [int(i) for i in str(vad)]
v = Counter(splt)
gr = plt.bar(v.keys(),v.values())
plt.bar_label(gr, label = v.values(), rotation = 90)
plt.title("Sports Watch Data")
plt.xlabel("Digits")
plt.ylabel("Count")
plt.show()
import decimal
from collections import Counter
import matplotlib.pyplot as plt
d2 = decimal.Decimal(2)
d = decimal.Context(prec = 10)
value = d2.sqrt(d)
div= str(value).split('.')
vad = div[1]
splt = [int(i) for i in str(vad)]
v = Counter(splt)
gr = plt.bar(v.keys(),v.values())
plt.bar_label(gr, label = v.values(), rotation = 90)
plt.title("Sports Watch Data")
plt.xlabel("Digits")
plt.ylabel("Count")
plt.show()
import decimal
from collections import Counter
import matplotlib.pyplot as plt
d2 = decimal.Decimal(2)
d = decimal.Context(prec = 10)
value = d2.sqrt(d)
div= str(value).split('.')
vad = div[1]
splt = [int(i) for i in str(vad)]
v = Counter(splt)
gr = plt.bar(v.keys(),v.values())
plt.bar_label(gr, label = v.values(), rotation = 90)
plt.title("NUmber")
plt.xlabel("Digits")
plt.ylabel("Count")
plt.show()
import decimal
from collections import Counter
import matplotlib.pyplot as plt
d2 = decimal.Decimal(2)
d = decimal.Context(prec = 10)
value = d2.sqrt(d)
div= str(value).split('.')
vad = div[1]
splt = [int(i) for i in str(vad)]
v = Counter(splt)
gr = plt.bar(v.keys(),v.values())
plt.bar_label(gr, label = v.values(), rotation = 45)
plt.title("NUmber")
plt.xlabel("Digits")
plt.ylabel("Count")
plt.show()
library(readxl)
CERA_Survey_PD22_Graves_9225_Data_Key <- read_excel("C:/Users/W.C/Downloads/OneDrive_1_1-20-2023/OneDrive_1_1-20-2023/CERA Survey PD22_Graves_9225 Data_Key.xlsx",
sheet = "Sheet1")
View(CERA_Survey_PD22_Graves_9225_Data_Key)
data <- CERA_Survey_PD22_Graves_9225_Data_Key
data
library(tableone)
names(data)
CreateTableOne(vars  = c("location", "size", "degree", "gender","presented in medicine"), strata = "Residence Type(target)", factorVars = c("location", "size", "degree", "gender","presented in medicine"), test = F)
CreateTableOne(vars  = c("location", "size", "degree", "gender","presented in medicine"), strata = "Residence Type(target)", factorVars = c("location", "size", "degree", "gender","presented in medicine"), test = F, data = data)
library(finalfit)
data
library(expss)
ls("package:exprss")
ls("package:expss")
da = na_if(data, "")
DA
da
da = na_if(data, " ")
da
da = na_if(data, ")")
da = na_if(data, "0")
da
da = na_if(data, 0)
da
sum(data$`American Indian/Alaska Native/Indigenous`, na.rm = TRUE)
df = da[,7:13]
df
library(tidyverse)
df = pivot_longer(da, names_to = "Race", values_to = value,7:13 )
df = pivot_longer(da, names_to = "Race", values_to = "value",7:13 )
df
dg = pivot_longer(df, names_to = "Race", values_to = "value",7:13 )
dg
df = da[,c(1,7:13)]
df
dg = pivot_longer(df, names_to = "Race", values_to = "value",7:13 )
c(1,7:13)
da[,c(1,7:13)]
df = da[,c(1,7:13)]
df
dg = pivot_longer(df, names_to = "Race", values_to = "value",7:13 )
df
dg = pivot_longer(df, names_to = "Race", values_to = "value",2:8 )
dg
dg %>%
group_by(Race) %>%
count()
dg %>%
group_by(Race) %>%
n()
dg %>%
group_by(Race) %>%
summarise(n = n())
dg %>%
n()
dg %>%
n()
dg %>%
select(Race) %>%
summaries(n = n())
dg %>%
select(Race) %>%
summarise(n = n())
dg
dg %>%
group_by(Race) %>%
summarise(n = count(value))
dg %>%
group_by(Race)
dg %>%
group_by(Race) %>%
summarise(n = sum(value))
dg %>%
group_by(Race) %>%
summarise(n = count(value))
na.omit(dg) %>%
group_by(Race) %>%
summarise(n = count(value))
na.omit(dg) %>%
group_by(Race) %>%
summarise(n = n())
na.omit(dg) %>%
group_by(Race) %>%
summarise(n = n()/sum(n()))
na.omit(dg) %>%
group_by(Race) %>%
summarise(n = n())
na.omit(dg) %>%
group_by(Race) %>%
summarise(n = n()/sum(n))
na.omit(dg) %>%
group_by(Race) %>%
summarise(n = n(), percent = n/sum(n))
na.omit(dg) %>%
group_by(Race) %>%
summarise(nn = n(), percent = nn/sum(nn))
na.omit(dg) %>%
group_by(Race) %>%
summarise(nn = n(), percent =sum(nn))
na.omit(dg) %>%
group_by(Race) %>%
summarise(nn = n()) %>%
ungroup()
na.omit(dg) %>%
group_by(Race) %>%
summarise(nn = n()) %>%
ungroup() %>%
summarise(peercent = nn/sum(nn))
na.omit(dg) %>%
group_by(Race) %>%
summarise(nn = n()) %>%
ungroup() %>%
summarise(peercent = nn/sum(nn)*100)
na.omit(dg) %>%
group_by(Race) %>%
summarise(nn = n()) %>%
ungroup() %>%
summarise(cont = n,peercent = nn/sum(nn)*100)
na.omit(dg) %>%
group_by(Race) %>%
mutate(nn = n()) %>%
ungroup() %>%
mutate(cont = n,peercent = nn/sum(nn)*100)
na.omit(dg) %>%
group_by(Race) %>%
mutate(nn = n()) %>%
ungroup() %>%
mutate(cont = nn,peercent = nn/sum(nn)*100)
na.omit(dg) %>%
group_by(Race) %>%
mutate(nn = n()) %>%
ungroup() %>%
summarise(cont = distinct(nn),peercent = nn/sum(nn)*100)
distinct(dg$Race)
na.omit(dg) %>%
group_by(Race) %>%
mutate(nn = n())
gh = na.omit(dg) %>%
group_by(Race) %>%
mutate(nn = n())
distinct(gh$nn)
?distinct
gh = na.omit(dg) %>%
group_by(Race) %>%
mutate(nn = n()) %>%
distinct()
gh
gh = na.omit(dg) %>%
group_by(Race) %>%
mutate(nn = n())
gh
gh = na.omit(dg) %>%
group_by(Race) %>%
mutate(nn = n()) %>%
ungroup() %>%
mutate(peercent = nn/sum(nn)*100) %>%
select(Race, nn, peercent) %>%
distinct()
gh
gh$nn/sum(gh$nn)
gh = na.omit(dg) %>%
group_by(Race) %>%
mutate(nn = n()) %>%
ungroup() %>%
distinct()
gh
gh = na.omit(dg[,-1]) %>%
group_by(Race) %>%
mutate(nn = n()) %>%
ungroup() %>%
distinct()
gh
gh = na.omit(dg[,-1]) %>%
group_by(Race) %>%
mutate(nn = n()) %>%
ungroup() %>%
distinct() %>%
mutate(peercent = nn/sum(nn)*100) %>%
select(Race, nn, peercent) %>%
distinct()
gh
gh = na.omit(dg[,-1]) %>%
group_by(Race) %>%
mutate(nn = n()) %>%
ungroup() %>%
distinct() %>%
mutate(peercent = nn/sum(nn)*100) %>%
select(Race, nn, peercent)
gh
library(tidyverse)
a = mtcars %>%
group_by(am) %>%
nest()
a
a = mtcars %>%
group_by(am) %>%
nest() %>%
mutate(model =lapply(data , function(df) lm(mpg ~ disp, data= df)  ))
a
a[[1]]
model[[1]]
a$model[[1]]
a = mtcars %>%
group_by(am) %>%
nest() %>%
mutate(model =sapply(data , function(df) lm(mpg ~ disp, data= df)  ))
?sapply
sapply(mtcars,mean)
lapply(mtcars,mean)
vapply(mtcars, mean)
a = mtcars %>%
group_by(am) %>%
nest() %>%
mutate(model =lapply(data , function(df) lm(mpg ~ disp, data= df)  ))
mapply(mtcars,mean)
mapply(mtcars,FUN =  mean)
a = mtcars %>%
group_by(am) %>%
nest() %>%
mutate(model =mapply(data , function(df) lm(mpg ~ disp, data= df)  ))
a = mtcars %>%
group_by(am) %>%
nest() %>%
mutate(model =sapply(data , function(df) lm(mpg ~ disp, data= df)  ))
a = mtcars %>%
group_by(am) %>%
nest() %>%
mutate(model =lapply(data , function(df) lm(mpg ~ disp, data= df)  ))
vapply(mtcars,FUN =  mean)
mapply(mtcars,FUN =  mean)
gh = lm( mgp ~., data = mtcars)
gh = lm( mpg ~., data = mtcars)
summarise(m = mean(.fitted)))
summarise(m = mean(.fitted)))
summarise(m = mean(.fitted))})
a = mtcars %>%
group_by(am) %>%
nest() %>%
mutate(model =lapply(data , function(df){ broom::augment(gh, newdata = df, "response") %>%
summarise(m = mean(.fitted))}))
a = mtcars %>%
group_by(am) %>%
nest() %>%
mutate(model =lapply(data , function(df) broom::augment(gh, newdata = df, "response") %>%
summarise(m = mean(.fitted))))
a = mtcars %>%
group_by(am) %>%
nest() %>%
mutate(m =lapply(data , function(df) broom::augment(gh, newdata = df, "response") %>%
summarise(m = mean(.fitted))))
a = mtcars %>%
group_by(am) %>%
nest() %>%
mutate(apply(data , function(df) broom::augment(gh, newdata = df, "response") %>%
summarise(m = mean(.fitted))))
a = mtcars %>%
group_by(am) %>%
nest() %>%
mutate(lapply(data , function(df) broom::augment(gh, newdata = df, "response") %>%
summarise(m = mean(.fitted))))
mapply(mean, mtcars$am, mtcars$disp)
mapply(mean, mtcars$am, mtcars$disp)
mapply(mean, mtcars$disp, mtcars$mpg)
mapply(mean, mtcars$disp, mtcars$am)
mapply(mean, mtcars$disp, mtcars$am)
mtcars %>%
?nest()
mtcars %>% #
?nest()
mtcars %>% #
?nest()
?nest()
knitr::opts_chunk$set(echo = TRUE)
kbl(cbind(comp1, comp2), format = "latex")
x = ts(rweibull(100000, rate = 5, shape = 10), frequency = 1)
?rweibull
# Weibull distribution
plot(rweibull(100000, scale = 5, shape = 10))
# Weibull distribution
plot(density(rweibull(100000, scale = 5, shape = 10)))
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/W.C/Downloads/project_2")
knitr::opts_chunk$set(echo = TRUE)
round(cbind(comp2, comp4, comp5),3)
